.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CtrlO::PDF 3"
.TH CtrlO::PDF 3 "2018-08-12" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CtrlO::PDF \- high level PDF creator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use CtrlO::PDF;
\&  use Text::Lorem;
\&
\&  my $pdf = CtrlO::PDF\->new(
\&      logo        => "logo.png",
\&      orientation => "portrait", # Default
\&      footer      => "My PDF document footer",
\&  );
\&
\&  # Add a page
\&  $pdf\->add_page;
\&
\&  # Add headings
\&  $pdf\->heading(\*(AqThis is the main heading\*(Aq);
\&  $pdf\->heading(\*(AqThis is a sub\-heading\*(Aq, size => 12);
\&
\&  # Add paragraph text
\&  my $lorem = Text::Lorem\->new();
\&  my $paras = $lorem\->paragraphs(30);
\&  $pdf\->text($paras);
\&
\&  # Add a table
\&  my $data =[
\&      [\*(AqFruit\*(Aq, \*(AqQuantity\*(Aq], # Table header
\&      [\*(AqApples\*(Aq, 120],
\&      [\*(AqPears\*(Aq, 90],
\&      [\*(AqOranges\*(Aq, 30],
\&  ];
\&
\&  my $hdr_props = {
\&      repeat     => 1,
\&      justify    => \*(Aqcenter\*(Aq,
\&      font_size  => 8,
\&  };
\&
\&  $pdf\->table(
\&      data => $data,
\&      header_props => $hdr_props,
\&  );
\&
\&  my $file = $pdf\->content;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make it easy to create PDFs by providing a high level
interface to a number of existing \s-1PDF\s0 modules. It aims to \*(L"do the right thing\*(R"
by default, allowing minimal coding to create long PDFs. It includes
pagination, headings, paragraph text, images and tables. Although there are a
number of other modules to create PDFs with a high-level interface, I found
that these each lack certain features (e.g. image insertion, paragraph text).
This module tries to include each of those features through another existing
module. Also, it is built on \s-1PDF::API2,\s0 and provides access to that object, so
content can also be added directly using that, thereby providing any powerful
features required.
.SH "METHODS"
.IX Header "METHODS"
.SS "pdf"
.IX Subsection "pdf"
Returns the \f(CW\*(C`PDF::API2\*(C'\fR object used to create the \s-1PDF.\s0
.SS "page"
.IX Subsection "page"
Returns the current \s-1PDF\s0 page.
.SS "add_page"
.IX Subsection "add_page"
Adds a \s-1PDF\s0 page and returns it.
.PP
Note that when a \s-1PDF\s0 page is added (either via this method or automatically)
the is_new_page flag records that a new page is in use with no content. See
that method for more details.
.SS "is_new_page"
.IX Subsection "is_new_page"
Whether the current page is new with no content. When the heading or text
methods are called and this is true, additional top margin is added to account
for the height of the text being added. Any other content manually added will
not include this margin and will leave the internal new page flag as true.
.SS "clear_new_page"
.IX Subsection "clear_new_page"
Manually clears the is_new_page flag.
.SS "orientation"
.IX Subsection "orientation"
Sets or returns the page orientation (portrait or landscape). Portrait is default.
.SS "width"
.IX Subsection "width"
Sets or returns the width. Default is A4.
.SS "height"
.IX Subsection "height"
Sets or returns the height. Default is A4.
.SS "margin"
.IX Subsection "margin"
Sets or returns the page margin. Default 40 pixels.
.SS "top_padding"
.IX Subsection "top_padding"
Sets or returns the top padding (additional to the margin). Default 0.
.SS "footer"
.IX Subsection "footer"
Sets or returns the footer text. Page numbers are added automatically.
.SS "font"
.IX Subsection "font"
Sets or returns the font. This is based on \s-1PDF::API2\s0 ttfont which returns a
TrueType or OpenType font object. By default it assumes the font is available
in the exact path \f(CW\*(C`truetype/liberation/LiberationSans\-Regular.ttf\*(C'\fR. A future
version may make this more flexible.
.SS "fontbold"
.IX Subsection "fontbold"
As font, but a bold font.
.SS "logo"
.IX Subsection "logo"
The path to a logo to include in the top-right corner of every page (optional).
.SS "logo_scaling"
.IX Subsection "logo_scaling"
The scaling of the logo. For best results a setting of 0.5 is recommended (the
default).
.SS "logo_padding"
.IX Subsection "logo_padding"
The padding below the logo before the text. Defaults to 10 pixels.
.ie n .SS "heading($text, %options)"
.el .SS "heading($text, \f(CW%options\fP)"
.IX Subsection "heading($text, %options)"
Add a heading. If called on a new page, will automatically move the cursor down
to account for the heading's height (based on the assumption that one pixel
equals one point). Options available are \f(CW\*(C`size\*(C'\fR, \f(CW\*(C`topmargin\*(C'\fR and
\&\f(CW\*(C`bottommargin\*(C'\fR.
.ie n .SS "text($text, %options)"
.el .SS "text($text, \f(CW%options\fP)"
.IX Subsection "text($text, %options)"
Add paragraph text. This will automatically paginate. Options available are \f(CW\*(C`color\*(C'\fR.
.SS "table(%options)"
.IX Subsection "table(%options)"
Add a table, based on PDF::Table. Options available are \f(CW\*(C`data\*(C'\fR to pass in the
data for the table; all other options are passed to the table method of
PDF::Table.
.ie n .SS "image($file, %options)"
.el .SS "image($file, \f(CW%options\fP)"
.IX Subsection "image($file, %options)"
Add an image. Options available are \f(CW\*(C`scaling\*(C'\fR.
.SS "content"
.IX Subsection "content"
Return the \s-1PDF\s0 content.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Ctrl O Ltd
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of either: the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
